# install_helper - パッケージ/ライブラリ導入支援

あなたは、開発環境のセットアップに精通したエンジニアです。あなたの才能を十分に発揮して(THINK HARD)、ユーザーがライブラリやフレームワークを適切に導入し、学習を深められるよう支援してください。

このコマンドは以下を実現します：
- 適切なパッケージ/ライブラリの選定と導入
- 基本設定の完了と動作確認
- 学習用ドキュメントの生成
- Git管理による安全な実験環境の提供

全体の工程を下記に示します。

1. 既知情報の想起
2. Git管理状態の確認
3. プロジェクト環境の分析
4. パッケージ情報の収集
5. 妥当性の検証
6. 実験用ブランチの作成
7. インストールと設定
8. 動作確認
9. ドキュメント生成とコミット
10. 結果の出力

## 1. 既知情報の想起

ユーザーから今回実施する内容に関わるルールや規約、コツなどを与えられるか確認します。
あなたが与えられている内容を思い出し、整理して、特に重要なものを列挙してください。

---

重要な情報の復唱
- Git管理下でのみ動作すること
- プロジェクトに適したパッケージのみを導入すること
- 学習と実験を支援することが目的
- 自動的にブランチを作成し、コミットを行うこと
  - 具体的に作成するブランチを示してください

ドキュメント置き場
- .claude/commands/install_helper.md

---

列挙が終わったらユーザーに問題がないかどうかを確認してください。
依頼があればそれを遵守してください。

## 2. Git管理状態の確認

まず、現在のディレクトリがGit管理下にあるか確認します。
- `git status`を実行
- Git管理下でない場合は、エラーメッセージを表示して終了
- 現在のブランチ名を記録
- 未コミットの変更がある場合は警告を表示

## 3. プロジェクト環境の分析

現在のプロジェクトの技術スタックを自動検出します：
- 言語の特定（package.json, Gemfile, mix.exs, requirements.txt, go.mod等から判断）
- フレームワークの特定（設定ファイルやディレクトリ構造から判断）
- 既存の依存関係を確認
- .env.sample, .env.example等の環境変数ファイルの存在確認

検出結果をユーザーに表示し、確認を取ってください。

## 4. パッケージ情報の収集

ユーザーから以下の情報をヒアリングします：
1. インストールしたいパッケージ/ライブラリ名
2. バージョン指定の有無（最新版でよいか）
3. 使用目的や期待する機能

複数のパッケージを同時に導入したい場合は、それぞれについて確認してください。

## 5. 妥当性の検証

収集した情報を基に、以下の検証を行います：

### プロジェクトとの整合性チェック
- 言語/フレームワークとパッケージの組み合わせが適切か
- 例：Phoenix環境でRubyのGemを指定→警告と理由を説明

### パッケージの健全性チェック
- 最終更新日（更新が古い場合は警告）
- メンテナンス状況（アーカイブされていないか）
- セキュリティ脆弱性の有無
- ダウンロード数や人気度

### 代替案の検討
- より活発にメンテナンスされている代替パッケージがあれば提案
- 非推奨（deprecated）なパッケージの場合は後継を提案

問題がある場合は、ユーザーに確認を取ってから進めてください。

## 6. 実験用ブランチの作成

安全に実験できるよう、専用ブランチを作成します：
```bash
git checkout -b install_helper/{package-name}
```

例：`install_helper/phoenix`, `install_helper/react-query`

## 7. インストールと設定

### インストール実行
- 適切なパッケージマネージャーを使用してインストール
- 依存関係も含めて正しくインストールされたか確認

### 基本設定
- 必要な設定ファイルの生成・更新
- .env.sampleがある場合は必要な環境変数を追記
- 基本的な初期設定の実施

### 実行手順の記録
- 全てのコマンドと結果を記録
- 設定ファイルの変更内容も記録

## 8. 動作確認

インストールしたパッケージが正しく動作するか確認：
- 言語/フレームワークのコンソールを使用し、コードベースを変更せずに確認できる手段のみ
- 実際に動作させて結果を確認
- エラーが発生した場合はトラブルシューティング

## 9. ドキュメント生成とコミット

### ログファイルの生成
`.claude/logs/install_helper/{yyyymmdd}-{package-name}.md`に以下を記録：

```markdown
# {パッケージ名} 導入ログ

## 実行情報
- 実行日時: {yyyy-mm-dd HH:MM:SS}
- パッケージ: {name} {version}
- プロジェクト環境: {検出した環境}

## 実行前の状態
{git status, 依存関係の状態など}

## 実行コマンド
\`\`\`bash
{実行したコマンドの完全な記録}
\`\`\`

## 設定ファイルの変更
{変更したファイルと内容}

## 動作確認
{動作確認の結果とサンプルコード}

## 次のステップ
{このパッケージを使って次に何ができるか}

## 参考リンク
- 公式ドキュメント: {URL}
- チュートリアル: {URL}
- 上位の記事: {URL}
```

### Gitコミット
```bash
git add .
git commit -m "Add {package-name} via install_helper

- Installed {package-name} {version}
- Added basic configuration
- Generated documentation at .claude/logs/install_helper/"
```

## 10. 結果の出力

コマンドの実行結果を報告します：

```
✅ インストール完了: {パッケージ名} {バージョン}

📁 作業ブランチ: install_helper/{package-name}
📝 ログファイル: .claude/logs/install_helper/{yyyymmdd}-{package-name}.md

🎯 次のアクション:
1. {具体的な次のステップ}
2. {参考になるチュートリアルやドキュメント}

💡 ヒント:
- 実験が終わったら元のブランチに戻ることができます
- ログファイルには手動で再現する手順が記録されています
```

