サポート〜自動テスト実装

自動テストを実装するためにサポートしてください。

全体の工程を示します。

1. 事前知識獲得
2. 諸注意の理解
3. 画面表示の自動テスト
4. 画面操作の自動テスト
5. 操作やイベントに対応する関数の自動テスト
6. 最後に追加したdescribe/testのアウトラインを日本語で出力

実装前に自動テストをかくTDDを、実装はインターフェスとなる処理のみで、先に仕上げるというタスクになります。

難易度が高いので、ぜひ才能を発揮してください。
Happy programming!

## 1. 事前知識獲得

設計の10番台(docs/1*_)のファイルは重要である。

CLAUDE.local.md には、今回自動テストを作成する対象となる「いまのタスク」の記載があるため確認する。

CLAUDE.local.mdにある「モノとCRUD」を参考に、自動テストを実装する。

## 2. 諸注意の理解

テスト粒度
- LiveView（および画面を使う）テストは、基本パターン(c0)の自動テストを目安とする
- コンテキスト関数テストは、各パターン(c1)の自動テストを目安とする。重要な判定となる条件分岐が想定される場合は、別途関数化するなどし、c1でカバーする範囲を増やす。
- c0やc1は目安であり、describeやtestに記載する必要はない


*重要* 自動テストの実装が目的のため、アプリケーションのコードには原則として触らないこと。自動テストを通すのはあなたのタスクではない。

ただし、以下についてはあなたの仕事である。
- 実行エラーを出さないように、枠組みの実装（ルーティング含む）、インターフェースの実装を行う
  - 実装というより設計を形にしておくことに近い
  - 続く開発者がジュニアである可能性もある
- 続く開発者が困惑しない程度には、想定している仮実装状態をつくること
  - 場合によってはコメントで擬似コードを示すこと
  - 続く開発者がジュニアである可能性もある

## 3. LiveView表示の自動テスト

自動テスト中でDOMのIDが必要になるときは、想定で記述して問題ない。

## 4. LiveView操作の自動テスト

画面定義に基づいて、操作によって起こることの自動テストを実装する。

## 5. 操作やイベントに対応する関数の自動テスト

操作と1:1対応する関数を適当なコンテキストに作る前提で自動テストを実装する。関数が複雑あるいは巨大になる見込みがあれば、関数を分離し、その想定の関数の自動テストも用意する。

