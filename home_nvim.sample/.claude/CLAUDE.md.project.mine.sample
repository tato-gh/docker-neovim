# CLAUDE.md

このファイルは開発プロジェクトに個人用途で置く .claude/CLAUDE.md のサンプルおよび例示集です。

## Work Directory

Place files for work in `.claude/works` directory.

## Work in Branch

When working on a branch, the branch-directory is:
`.claude/works/{branch-name-with-slashes-replaced-by-hyphens}/`

For example:
- Branch `dev` → `.claude/works/dev/`
- Branch `feat/1/test` → `.claude/works/feat-1-test/`
- Branch `fix/15/ui` → `.claude/works/fix-15-ui/`

## Issue in Branch

Conversations within the branch are assumed to be issues at:
`{branch-directory}/issue.md`

This issue.md contains the requirements and decisions for the work on that specific branch.

## Application Documents

See below:
- Project Proposal: `@.claude/works/project-proposal.md`
- Application Instraction: `@.claude/works/application-instraction.md`
- Data: `@.claude/works/data-design.md`
- Screens: `@.claude/works/screens-design.md`
- Functions: `@.claude/works/functions-design.md`

## Tasks

The working process is divided into several fixed tasks:
- pdm: responsible for application issues and documents as the top product manager.
- model: responsible for modeling, especially `data-design.md`.
- front: responsible for front-side documents, especially `screens-design.md` and rough htmls.
- back: responsible for back-side documents, especially `functions-design.md`.
- web_design: responsible for screen-decorated HTML and controls such as design tokens and component structure.
- phx_front: responsible for managing the front side of the phoenix framework.
- phx_context: responsible for the backside of the phoenix framework, especially context management.
- phx_test: responsible for managing automated testing of the phoenix framework.

First, decide the task, and then proceed with the following files according to the task.

### Memories and Experiences

Each task has generalized conventions, practices, and precautions:
`.claude/works/{task}/commons.md`

The experience of the review are prepared for each task with the goal of avoiding similar findings in the same case:
`.claude/works/{task}/reviews.md`

## Typical Development Flow

{issue, html}
|> run_phx_context()
|> run_phx_front()
|> run_phx_test()

{all_codes}
|> run_phx_refact()

## Yarikata

It's practices for you to get my approval.

Basic:
- Do not ignore warnings. Please care it for all.

Elixir Idiomatic Practices:
- We embrace Elixir’s expressive and functional programming features to write maintainable and clear code.
- Avoid prefixes like is_ in function names, as Elixir encourages using predicate functions with names ending in ?. For example, write valid? instead of is_valid.
- Leverage pattern matching and function clauses to express different behaviors cleanly, reducing the need for explicit conditionals.
- Structure code with pipelines (|>) to make data transformations readable and flow naturally.
- Rather than using conditional branching in the flow of processing (procedures), use conditional branching in the process of creating the necessary data. Then, the process is implemented by transforming the data. `value = conv(prev_value, condition)` is better than `value = if(condition) do value1 else value2 end`.
- Avoid defensive coding. Trust the schema definition. Minimize conditional branching.

Playwright
- If you want to use it, please request it to the user.

## Dictionary

Project-specific words and phrases are noted below.

{word}: {description}

